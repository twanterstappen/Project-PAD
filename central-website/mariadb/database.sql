-- DROP DATABASE user;
-- CREATE DATABASE user;
-- CREATE USER 'central-web-user'@'%' IDENTIFIED BY 'LitterBoxTV&40295!';
GRANT SELECT, INSERT, DELETE, UPDATE ON user.* TO 'central-web-user'@'%';
FLUSH privileges;
use user;


-- table ctf
CREATE TABLE `user`.`ctf` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `ctf` VARCHAR(255) NOT NULL,
  `sort` VARCHAR(255) NOT NULL,
  `points` INT NOT NULL,
  `link` VARCHAR(255),
  `port` INT,
  `difficulty` VARCHAR(255),
  PRIMARY KEY (`id`));


-- Table flag
CREATE TABLE `user`.`flag` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `flag` VARCHAR(255) NOT NULL UNIQUE,
  `ctf_id` INT NOT NULL,
  PRIMARY KEY (`id`, `ctf_id`),
  INDEX `fk_flag_ctf_idx` (`ctf_id` ASC) VISIBLE,
  CONSTRAINT `fk_flag_ctf`
    FOREIGN KEY (`ctf_id`)
    REFERENCES `user`.`ctf` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- Table user
CREATE TABLE `user`.`user` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `firstname` VARCHAR(255) NOT NULL,
  `prefix` VARCHAR(255) NULL DEFAULT NULL,
  `lastname` VARCHAR(255) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `nickname` VARCHAR(255) NOT NULL UNIQUE,
  `password` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`));


-- Table completed ctf's
CREATE TABLE `user`.`complete` (
  `ctf_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`ctf_id`, `user_id`),
  INDEX `fk_ctf_has_user_user1_idx` (`user_id` ASC) VISIBLE,
  INDEX `fk_ctf_has_user_ctf1_idx` (`ctf_id` ASC) VISIBLE,
  CONSTRAINT `fk_ctf_has_user_ctf1`
    FOREIGN KEY (`ctf_id`)
    REFERENCES `user`.`ctf` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ctf_has_user_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `user`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- Table favourite ctf's
CREATE TABLE `user`.`favourite` (
  `ctf_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`ctf_id`, `user_id`),
  INDEX `fk_ctf_has_user_user2_idx` (`user_id` ASC) VISIBLE,
  INDEX `fk_ctf_has_user_ctf2_idx` (`ctf_id` ASC) VISIBLE,
  CONSTRAINT `fk_ctf_has_user_ctf2`
    FOREIGN KEY (`ctf_id`)
    REFERENCES `user`.`ctf` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ctf_has_user_user2`
    FOREIGN KEY (`user_id`)
    REFERENCES `user`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- Table like_unlike ctf's
CREATE TABLE `user`.`like_unlike` (
  `ctf_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `like` TINYINT NOT NULL,
  PRIMARY KEY (`ctf_id`, `user_id`),
  INDEX `fk_ctf_has_user_user3_idx` (`user_id` ASC) VISIBLE,
  INDEX `fk_ctf_has_user_ctf3_idx` (`ctf_id` ASC) VISIBLE,
  CONSTRAINT `fk_ctf_has_user_ctf3`
    FOREIGN KEY (`ctf_id`)
    REFERENCES `user`.`ctf` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ctf_has_user_user3`
    FOREIGN KEY (`user_id`)
    REFERENCES `user`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -- Create views
-- View for ctf's
-- Mostly generated by ChatGPT
CREATE VIEW ctf_view AS
SELECT ctf.ctf, 
      ctf.sort, 
      IF(lu_stats.total_likes = 0 AND lu_stats.total_unlikes = 0, 'None',
          CONCAT(ROUND(lu_stats.total_likes / (lu_stats.total_likes + lu_stats.total_unlikes) * 100), '%')) AS rating, 
	    ctf.points, 
      ctf.link, 
      ctf.port, 
      ctf.id, 
      COUNT(co.ctf_id) AS total_solves,
      IF(f.ctf_id IS NOT NULL, 1, 0) AS User_favorite,
      ctf.difficulty,
      u.id AS user_id,
	    IF(lu.`like` = 1, 2, IF(lu.`like` = 0, 1, 0)) AS User_like
  FROM ctf
  CROSS JOIN user AS u
  LEFT JOIN complete AS co ON ctf.id = co.ctf_id
  LEFT JOIN favourite AS f ON ctf.id = f.ctf_id AND f.user_id = u.id
  LEFT JOIN (
    SELECT ctf_id,
          COUNT(CASE WHEN `like` = 1 THEN 1 END) AS total_likes,
          COUNT(CASE WHEN `like` = 0 THEN 1 END) AS total_unlikes
          FROM like_unlike
          GROUP BY ctf_id
        ) AS lu_stats ON ctf.id = lu_stats.ctf_id
  LEFT JOIN like_unlike AS lu ON ctf.id = lu.ctf_id AND lu.user_id = u.id
  GROUP BY ctf.id, u.id;
-- View for favourite ctf's
-- Mostly generated by ChatGPT
CREATE VIEW ctf_favourite AS
SELECT ctf.ctf, 
      ctf.sort, 
      IF(lu_stats.total_likes = 0 AND lu_stats.total_unlikes = 0, 'None',
          CONCAT(ROUND(lu_stats.total_likes / (lu_stats.total_likes + lu_stats.total_unlikes) * 100), '%')) AS rating, 
      ctf.points, 
      ctf.link, 
      ctf.port, 
      ctf.id, 
      COUNT(co.ctf_id) AS total_solves,
      1 AS User_favorite,
      ctf.difficulty,
      u.id AS user_id,
      IF(lu.`like` = 1, 2, IF(lu.`like` = 0, 1, 0)) AS User_like
    FROM ctf
    CROSS JOIN user AS u
    LEFT JOIN complete AS co ON ctf.id = co.ctf_id
    LEFT JOIN favourite AS f ON ctf.id = f.ctf_id AND f.user_id = u.id
    LEFT JOIN (
        SELECT ctf_id,
              COUNT(CASE WHEN `like` = 1 THEN 1 END) AS total_likes,
              COUNT(CASE WHEN `like` = 0 THEN 1 END) AS total_unlikes
        FROM like_unlike
        GROUP BY ctf_id
    ) AS lu_stats ON ctf.id = lu_stats.ctf_id
    LEFT JOIN like_unlike AS lu ON ctf.id = lu.ctf_id AND lu.user_id = u.id
    WHERE ctf.id IN (
        SELECT ctf_id
        FROM favourite
        WHERE user_id = u.id
    )
    GROUP BY ctf.id, u.id;
-- View for completed ctf's
-- Mostly generated by ChatGPT
CREATE VIEW ctf_complete AS
SELECT ctf.ctf, 
      ctf.sort, 
      IF(lu_stats.total_likes = 0 AND lu_stats.total_unlikes = 0, 'None',
          CONCAT(ROUND(lu_stats.total_likes / (lu_stats.total_likes + lu_stats.total_unlikes) * 100), '%')) AS rating, 
      ctf.points, 
      ctf.link, 
      ctf.port, 
      ctf.id, 
      COUNT(co.ctf_id) AS total_solves,
      IF(f.ctf_id IS NOT NULL, 1, 0) AS User_favorite,
      ctf.difficulty,
      u.id AS user_id,
      IF(lu.`like` = 1, 2, IF(lu.`like` = 0, 1, 0)) AS User_like
    FROM ctf
    CROSS JOIN user AS u
    LEFT JOIN complete AS co ON ctf.id = co.ctf_id
    LEFT JOIN favourite AS f ON ctf.id = f.ctf_id AND f.user_id = u.id
    LEFT JOIN (
        SELECT ctf_id,
              COUNT(CASE WHEN `like` = 1 THEN 1 END) AS total_likes,
              COUNT(CASE WHEN `like` = 0 THEN 1 END) AS total_unlikes
        FROM like_unlike
        GROUP BY ctf_id
    ) AS lu_stats ON ctf.id = lu_stats.ctf_id
    LEFT JOIN like_unlike AS lu ON ctf.id = lu.ctf_id AND lu.user_id = u.id
    WHERE ctf.id IN (
        SELECT ctf_id
        FROM complete
        WHERE user_id = u.id
    )
    GROUP BY ctf.id, u.id;
-- View for scoreboard ctf's
-- Mostly generated by ChatGPT
CREATE VIEW user_scoreboard AS
SELECT u.id AS user_id, u.nickname, IFNULL(SUM(c.points), 0) AS total_points,
    (SELECT COUNT(DISTINCT total_points) + 1
     FROM (
         SELECT SUM(c2.points) AS total_points
         FROM user AS u2
         INNER JOIN complete AS co2 ON u2.id = co2.user_id
         INNER JOIN flag AS f2 ON co2.ctf_id = f2.ctf_id
         INNER JOIN ctf AS c2 ON f2.ctf_id = c2.id
         GROUP BY u2.id
     ) AS rankings
     WHERE total_points > IFNULL((SELECT SUM(c3.points)
                                 FROM user AS u3
                                 INNER JOIN complete AS co3 ON u3.id = co3.user_id
                                 INNER JOIN flag AS f3 ON co3.ctf_id = f3.ctf_id
                                 INNER JOIN ctf AS c3 ON f3.ctf_id = c3.id
                                 WHERE u3.id = u.id
                                 GROUP BY u3.id), 0)
     ) AS position
FROM user AS u
LEFT JOIN complete AS co ON u.id = co.user_id
LEFT JOIN ctf AS c ON co.ctf_id = c.id
GROUP BY u.id;





-- -- Value inserts
-- default users
INSERT INTO user.user VALUES(NULL,'Twan',NULL,'Terstappen','twanterstappen@mail.com', 'twan_cyber','$2b$12$eX819XcEUZO.hEhY70ijb.OMdOxbkUUOyK9ijgYhoj5f059No7pyy'); 
INSERT INTO user.user VALUES(NULL,'Antonyo',NULL,'Jarouj','antonyojarouj@mail.com', 'antonyo_cyber','$2b$12$eX819XcEUZO.hEhY70ijb.OMdOxbkUUOyK9ijgYhoj5f059No7pyy');
INSERT INTO user.user VALUES(NULL,'Luka',NULL,'Ciganovic','lukaciganovic@mail.com', 'luka_cyber','$2b$12$eX819XcEUZO.hEhY70ijb.OMdOxbkUUOyK9ijgYhoj5f059No7pyy'); 
INSERT INTO user.user VALUES(NULL,'Ibrahim',NULL,'Selek','ibrahimselek@mail.com', 'ibrahim_cyber','$2b$12$eX819XcEUZO.hEhY70ijb.OMdOxbkUUOyK9ijgYhoj5f059No7pyy'); 


-- -- CTF's
-- ID, name, categorie, points, link (so /ctf/[link]), difficulty
-- SQL Injection
INSERT INTO user.ctf VALUES(1,'phpMyAdmin','SQL Injection',3,'phpmyadmin',5001,'Easy');
INSERT INTO user.ctf VALUES(2,'Vaccine4you','SQL Injection',5,'vaccine4you',5002,'Medium');
INSERT INTO user.ctf VALUES(3,'WordPress','SQL Injection',7,'wordpress',5003,'Hard');
-- Cryptographic Failure
INSERT INTO user.ctf VALUES(4,'Emperor of roman','Cryptographic Failure',2,'roman-empire',5004,'Easy');
INSERT INTO user.ctf VALUES(5,'Cracking the META','Cryptographic Failure',5,'crack-meta',5005,'Medium');
INSERT INTO user.ctf VALUES(6,'Hunting in the woods','Cryptographic Failure',8,'passwordhunt',5006,'Hard');
-- Impersonation
INSERT INTO user.ctf VALUES(7,'Who am i?','Impersonation',2,'impersonation1',5007,'Easy');
-- URL Tampering
INSERT INTO user.ctf VALUES(10,'Hidden Directories','URL Tampering',4,'hidden_directories',5010,'Easy');
INSERT INTO user.ctf VALUES(11,'Garbage4you','URL Tampering',5,'garbage4you',5011,'Medium');
-- Steganography
INSERT INTO user.ctf VALUES(13,'Chameleon Challenge','Steganography',3,'chameleon-challenge',5013,'Easy');




-- -- Flags
-- SQL Injection
INSERT INTO user.flag VALUES(NULL,'CyberCTF{That#was@easy!right?}',1);
INSERT INTO user.flag VALUES(NULL,'CyberCTF{Hey_there@you$are!}',2);
INSERT INTO user.flag VALUES(NULL,'CyberCTF{What$about#that@injection?}',3);
-- Cryptographic Failure
INSERT INTO user.flag VALUES(NULL,'CyberCTF{Say_my_name}',4);
INSERT INTO user.flag VALUES(NULL,'CyberCTF{Cry9t0_!s_n0t_alway$_fun!}',5);
INSERT INTO user.flag VALUES(NULL,'CyberCTF{Hunting#went!right@690}',6);
-- Impersonation
INSERT INTO user.flag VALUES(NULL,'CyberCTF{WH0_Am_1?}',7);
-- URL Tampering
INSERT INTO user.flag VALUES(NULL,'CyberCTF{y@u_F0u&d_M@3!}',10);
INSERT INTO user.flag VALUES(NULL,'CyberCTF{collecting9the#waste}',11);
-- Steganography
INSERT INTO user.flag VALUES(NULL,'CyberCTF{Ch@m3l30n_0f_$t3n06r@phy}',13);

